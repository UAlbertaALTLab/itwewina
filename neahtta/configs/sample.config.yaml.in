# Non-linguistic settings.
ApplicationSettings:
  app_name: "Neahttadigisánit"
  short_name: "sample"
  # This will be the default bookmark title suggested to the user, does
  # not have to resemble the app name, or anything, and the following is
  # just a suggestion.
  mobile_bookmark_name: "NDS: Sánit"
  default_locale: "se"
  default_pair: ["sme", "nob"]
  mobile_default_pair: ["SoMe", "nob"]
  # These are the people who will be emailed when there is an error. NB:
  # it may be useful to use aliases, e.g., my.email+alias@gmail.com in
  # order to make filtering errors more easy.
  admins_to_email:
    - "someone.goes.here@email.com"
  locales_available:
    - sme
    - nob
    - fin
  # Meta description and keywords for Google search results.
  app_meta_title: >
     Digibaakoeh gaskeviermesne 
  meta_description: >
     Free, mobile-friendly dictionaries for Olonetsian, Livonian, and Kven.
  meta_keywords: >
     kven, olonets, olonetsian, livonian, livvi, liivi 

# For default locals, these must correspond with what exists in the
# translations/ directory. In the case of languages with a 2-character ISO, use
# this, instead of the 3-character ISO. There is no connection between these
# settings and language pair names however, so those may be kept in 3-character
# format.

# `app_name` is what is displayed in the upper-left corner on every page.


##
### Linguistic settings
##

# 
# Some helpful aliases for paths below.
Tools:
  xfst_lookup: &LOOKUP '/usr/bin/lookup'
  gthome: &GTHOME '/home/neahtta/gtsvn'
  opt: &OPT '/opt/smi'

# Note that YAML doesn't support concatenating strings directly, 
# so in this case I use list notation. See the examples below.
#
# To avoid repeating, feel free to set aliases for things like
# shared FST format settings.

Morphology:
  sme:
    tool: *LOOKUP
    file: [*OPT, "/sme/bin/n-sme.fst"]
    inverse_file: [*OPT, "/sme/bin/dict-isme-norm.fst"]
    format: 'xfst'
    options: &sme_fst_options
      compoundBoundary: "  + #"
      derivationMarker: "suff."
      tagsep: ' '
      inverse_tagsep: '+'
  SoMe:
    tool: *LOOKUP
    file: [*OPT, "/sme/bin/some-sme.fst"] 
    inverse_file: [*OPT, "/sme/bin/dict-isme-norm.fst"]
    format: 'xfst'
    options:
      <<: *sme_fst_options
  nob:
    tool: *LOOKUP
    file: [*GTHOME, '/st/nob/bin/nob.fst']
    inverse_file: [*GTHOME, '/st/nob/bin/inob.fst']
    format: 'xfst'
    options:
      compoundBoundary: "#+Cmp+"
      derivationMarker: "+Der"
      tagsep: '+'
      inverse_tagsep: '+'

# For now, make sure that all languages that will be available are
# defined here.  example, if only one dictionary file is defined,
# `sme-nob`, there will still need to be a definition for language names
# for `nob`.
#
Languages:
  - iso: sme
  - iso: SoMe
  - iso: nob
  - iso: fin
  - iso: sma

# Here are the actual definitions of what dictionaries are available in the
# system. What is presented in the UI also adheres to the order that is here.
Dictionaries:
  - source: sme
    target: nob
    path: 'dicts/sme-nob.all.xml'
    # This key may be present and set to True and False, or missing--
    # default is False
    show_korp_search: True
    # If there are any input variants, specify this. NB: 'standard' and
    # 'mobile' are special values for `type`, and used in presenting
    # mobile users the correct default pair. If a variant is anything
    # other than the standard or mobile, use something else.
    #
    # Note that it's also a good idea to mark the strings here with
    # the gettext marker, so that they're translated.
    input_variants:
      - type: "standard"
        description: !gettext "Standard" 
        # Standárda 
        example: "(<em>áčđŋšŧž</em>)"
        short_name: "sme"
      - type: "mobile"
        description: !gettext "Sosiála media"
        # example: !gettext "(maiddái <em>acdnstz</em>)"
        example: !gettext "(incl. <em>acdnstz</em>)"
        short_name: "SoMe"

  - source: SoMe
    target: nob
    path: 'dicts/sme-nob.all.xml'

  - source: nob
    target: sme
    path: 'dicts/nob-sme.all.xml'

ReaderConfig:
  hdn:
    multiword_lookups: true
    multiword_list:
      # File format-- plain text, but line coments allowed:
      # Use %WORD% as a marker for any word these may co-occur with, i.e., if
      # the user clicks on a %WORD%, then search for these environments too.
      file: "configs/language_specific_rules/reader/hdn_multiwords.txt"
    # NB: this is JavaScript format, since it will be sent to the reader via
    # config. It must also be stored as a string.
    #
    # JavaScript is problematic with unicode, and \w in a regex ends up meaning
    # just the ASCII range, thus it's necessary to be very explicit.
    #
    # Also this example shows how to include periods and apostrophes in
    # word unit detection.
    #
    # http://regexpal.com/
    #
    word_regex: |
      [\u00C0-\u1FFF\u2C00-\uD7FF\w\.']+
    word_regex_opts: "g"
