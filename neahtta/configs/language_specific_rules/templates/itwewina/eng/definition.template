{# This template is also rendered with each entry (i.e., `rendered_templates`),
   and has access to all of the main entry-specific template values.

   Since the goal is definitions, `lexicon_entry` is relevant. Filtering
   by target languages happens here, so be sure to use the
   `xml_lang` filter if overriding.

   Overrides here:
     - sorting by @rank attribute
     - remove target language filter of meaning groups
     - remove examples

    Reminder of what the XML source (lexicon_entry) looks like:

      <e>
        <lg xml:lang="eng">
          <l pos="N">pow-wow</l>
        </lg>
        <mg>
          <tg xml:lang="crk">
            <!-- Entry in both, and broad gloss. -->
            <trunc sources="MD">pow-wow dancing.</trunc>
            <trunc sources="CW">the Grass Dance, pow-wow</trunc>
            <t rank="1.0" pos="N">pwâtisimowin</t>
          </tg>
        </mg>
      </e>

#}
 
{%- import 'lexicon.macros' as macros with context -%}

{%- for meaning_group in lexicon_entry|xpath('./mg')|sortby_xpath('./@rank') -%}
    {%- set translation_groups = meaning_group|xpath('./tg') -%}

    {# Skip empty meaning groups. These shouldn't exist but ¯\_(ツ)_/¯ #}
    {%- if translation_groups|count > 0 -%}
        <li>
    {%- else -%}
        {%- continue -%}
    {%- endif -%}

    {%- for translation_group in translation_groups -%}
        {# TODO: is it possible to avoid having to pass the global context variables in here? #}
        {{ templates.definition_text.render(translation_group=translation_group, _from=_from, _to=_to) }}
    {%- endfor -%}
{%- endfor -%}

{#  vim: set ts=4 sw=4 tw=72 syntax=htmljinja : #}

