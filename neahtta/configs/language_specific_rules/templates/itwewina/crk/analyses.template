{# This template is also rendered with each entry (i.e., `rendered_templates`),
   and has access to all of the main entry-specific template values.
#}

{% block template_doc %}{% if TEMPLATE_DOC %}
The following customizations have been made:

- Display the lexicon entry stem along with the lemma (√root).
  - Some customizations in `crk.py` and `crk_tags.py` relate to this.

- If a tag is PV, wrap it with tooltip markup to display the definition
  - twitter bootstrap tooltips js included

{% endif %}{% endblock %}

{%- import "lexicon.macros" as macros with context -%}
{%- import "korp.macros" as korp with context -%}

{%- macro render_tag_piece(tag, tooltip) -%}
  {%- if tooltip -%}
    <a href="#" data-toggle="tooltip" data-trigger="click hover" data-placement="bottom" data-title="{{ tooltip }}">{{ tag }}</a>
  {%- else -%}
    {{ tag }}
  {%- endif -%}
{% endmacro %}

{%- macro render_tag(formatted) -%}
  {%- for tag, tooltip in formatted -%}{%- if not tag %}{% continue -%}{% endif -%}
    {{ render_tag_piece(tag, tooltip) }}{% if not loop.last %}&nbsp;&plus;&nbsp;{% endif %}
  {% endfor %}
{% endmacro %}

<dl class="possible_analyses grid_analyses">
    {% if lexicon_entry %}
        {% set stem_d = lexicon_entry.xpath('./lg/stem/text()')|first %}
        {% set lem = lexicon_entry.xpath('./lg/l/text()')|first %}
        {% set stem = stem_d or lem %}
    {% else %}
        {% set stem = False %}
    {% endif %}

    {% for form in analyses %}
        {#-
            nikî-nitawi-kiskinwahamâkosin
            ⟵
            PV/nitawi + √ kiskinwahamâkosi- + Intransitive Animate Verb + Independent + Past + 1s

         #}
         {% set generated, log_data = form.lemma|generate_or_not(_from, form.tag, lexicon_entry) %}

        {% if generated %}
            {% set lemma_or_generated = generated|first %}
            {% if stem %}
                {% set repl = ' √' + stem %}
            {% else %}
                {% set lemma_or_generated = user_input %}
                {% set repl = '' %}
            {% endif %}
        {% endif %}

        <dt><span lang="{{ _from }}">{{ lemma_or_generated }}</span></dt>
        <dd>
            <ul class="possible_forms">
                {% set existing_tags = [] %}

                {% if stem %}
                    {% set repl = ' √' + stem %}
                {% else %}
                    {% set repl = '' %}
                {% endif %}

                {# iterate through tag pieces and make some replacements #}
                {% set _formatted_tags = [] %}
                {% for lt in form.tag %}
                    {% set lt_r = lt %}
                    {# Replace the Lemma tag with the actual lemma, then
                       reformat with spaces around the plus #}
                    {% if lt == form.lemma %}
                        {% set lt_r = repl|tagfilter(_from, _to, tagsep='+') %}
                        {% set tooltip = false %}
                    {% elif 'PV/' in lt %}
                        {% set lt_r = lt|tagfilter(_from, _to, tagsep='+') %}
                        {% set tooltip = lt|tagfilter_by(_from, _to, tagsep='+', tagset='preverb_definitions') %}
                    {% else %}
                        {% set lt_r = lt|tagfilter(_from, _to, tagsep='+') %}
                        {% set tooltip = false %}
                    {% endif %}
                    {% do _formatted_tags.append((lt_r, tooltip)) %}
                {% endfor %}

                {% set check_key = '+'.join(_formatted_tag) %}
                {% if check_key not in existing_tags %}
                    <li>&larr; {{ render_tag(_formatted_tags) }}
                    {% do existing_tags.append(check_key) %}
                {% endif %}

                {% if current_pair_settings.show_korp_search %}
                    <li> {{ korp.link_lemma(form.lemma) }} </li>
                {% endif %}
            </ul>
        </dd>
    {% endfor %}
</dl>

{# vim: set ts=4 sw=4 tw=0 wrapmargin=0 syntax=htmljinja : #}
