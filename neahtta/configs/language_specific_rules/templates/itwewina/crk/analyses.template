{# This template is also rendered with each entry (i.e., `rendered_templates`),
   and has access to all of the main entry-specific template values.

   All that is relevant here is the `analyses` variable.

   - Here we also display the lexicon entry stem along with the lemma.

#}

{%- import "lexicon.macros" as macros with context -%}

<dl class="possible_analyses grid_analyses">
    {% if lexicon_entry %}
        {% set stem = lexicon_entry.xpath('./lg/stem/text()')|first %}
    {% else %}
        {% set stem = False %}
    {% endif %}

    {% for grouper, forms in analyses|groupby('lemma') %}

        {% if stem %}
            {% set group_with_stem = "%s (%s)"|format(grouper, stem) %}
        {% else %}
            {% set group_with_stem = grouper %}
        {% endif %}

        {% for lemmagroup, lemmafs in forms|groupby('pos') %}
            {% if current_pair_settings.show_korp_search %}
                {% if lemmagroup and grouper %}
                    <dt><span lang="{{ _from }}">{{ group_with_stem }}</span> {{ macros.korp_link_lemma(grouper) }}</dt>
                {% else %}
                    <dt><span lang="{{ _from }}">{{ group_with_stem }}</span></dt>
                {% endif %}
            {% else %}
                <dt><span lang="{{ _from }}">{{ group_with_stem }}</span></dt>
            {% endif %}
            <dd>
                <ul class="possible_forms">
                    {% set existing_tags = [] %}
                    {% for lem in lemmafs %}
                    {% set formatted_tag = ' '.join(lem.tag)|tagfilter(_from, _to) %}
                    {% if formatted_tag not in existing_tags %}
                        <li>{{ formatted_tag }}</li>
                        {% do existing_tags.append(formatted_tag) %}
                    {% endif %}
                    {% endfor %}
                </ul>
            </dd>
        {% endfor %}
    {% endfor %}
</dl>

{# vim: set ts=4 sw=4 tw=72 syntax=htmljinja : #}

