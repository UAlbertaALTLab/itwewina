{# Komi example sentences are a bit more complex than other dictionaries: 

 * Genre types relate to some data structure

    grep "<xg genreTyp" kpv-all.xml | sort | uniq -c 

       1          <xg genreType="idiom">
       1          <xg genreType="playOnWords">
     121          <xg genreType="sign">
     259          <xg genreType="proverb">
     280          <xg genreType="riddle">
     593          <xg genreType="saying">

         <xg genreType="playOnWords">
            <x>кынӧмыд кӧ сюмалӧ, сюмӧдав</x>
            <xtCtn>
               <xt xml:lang="rus">если хочешь есть, навей берёстой</xt>
               <re>желудок</re>
            </xtCtn>
         </xg>

    - 'normal'

         <xg genreType="sign">
            <x>исерга сімӧ шог водзӧ</x>
            <xt xml:lang="rus">серьги ржавеют к беде</xt>
         </xg>

    - TODO: two <xt /> per <xg />

         <xg genreType="proverb">
            <x>бӧрдтӧм кага оз качайтны</x>
            <xt xml:lang="rus">дитя не плачет — мать не разумеет</xt>
            <xt tType="literal" xml:lang="rus">неплачущего ребёнка не укачивают</xt>
         </xg>

    - TODO: riddle is a bit more tricky: may have multiple <xt />, with tType, but
      then also has an <answer /> 

         <xg genreType="riddle">
            <x>би сьӧлӧма, ва рушкуа, ыргӧн платтьӧа</x>
            <xt xml:lang="rus">с огненным сердцем, с водяным брюхом, в медном платье</xt>
            <answer>
               <native>самӧвар</native>
               <xt xml:lang="rus">самовар</xt>
            </answer>
         </xg>

         <xg genreType="riddle">
            <x>кузь-кузь мужик да лун и вой юрбитӧ</x>
            <xt xml:lang="rus">длинный-длинный мужик день и ночь кланяется</xt>
            <xt tType="equivalent" xml:lang="rus">стоит поп голенаст, он кланяться горазд</x
t>
            <answer>
               <native>зыбка, кага лайкан</native>
               <xt xml:lang="rus">люлька, колыбельный оцеп</xt>
            </answer>
         </xg>

    - TODO: saying optionally has an xtCtn, but not always
         <xg genreType="saying">
            <x>асъя зэрыд — гӧсьт</x>
            <xtCtn>
               <xt xml:lang="rus">утренний дождь — гость</xt>
               <re>быстро пройдёт</re>
            </xtCtn>
         </xg>

 * <xtCtn /> helps group example translations with annotation nodes (<re />)

 TODO: extract strings

#}

{# Convert the text to a localization string #}
{%- macro genre_type_text(genre_type) -%}
    {%- if genre_type == 'saying' -%}
        {{ gettext("saying") }}
    {%- elif genre_type == "riddle" -%}
        {{ gettext("riddle") }}
    {%- elif genre_type == "proverb" -%}
        {{ gettext("proverb") }}
    {%- elif genre_type == "sign" -%}
        {{ gettext("sign") }}
    {# these don't have many instances #}
    {%- elif genre_type == "playOnWords" -%}
        {{ gettext("play on words") }}
    {%- elif genre_type == "idiom" -%}
        {{ gettext("idiom") }}
    {%- endif -%}
{%- endmacro -%}

{# Render the example text, and insert the translated genre if one exists #}
{%- macro example_text(example, genre_type) %}
    <dt lang="{{ _from }}">
        {%- if genre_type %}<span class="genre-type" lang="{{ _to }}">({{- genre_type_text(genre_type) -}})</span> {% endif -%}
        {%- if example|xpath('@re') %}
            {{ example|xpath('./x')|first|text }} ({{ example|xpath('@re')|first }})
        {% else %}
            {{ example|xpath('./x')|first|text }}
        {% endif -%}
    </dt>
{% endmacro -%}

{%- macro example_xtctn(xtctn, genre_type) %}
    {% set x_text = xtctn|xpath('./xt')|first|text %}
    {% set annotation = xtctn|xpath('./re') %}
    {% if annotation %}
        <dd lang="{{ _to }}">{{ x_text }} ({{ annotation|first|text }})</dd>
    {% else %}
        <dd lang="{{ _to }}">{{ x_text }}</dd>
    {% endif %}
{% endmacro -%}

{# TODO: xt @tType="literal" #}
{%- macro example_xts(ex, genre_type) %}
    {% for xt in ex|xpath('./xt') %}
        <dd><span lang="{{ _from }}">{{ xt|text }}</span></dd>
    {% endfor %}
{% endmacro -%}

{%- macro example_answer(answer, genre_type) %}
    <dt class="riddle-answer" lang="{{ _from }}">
        <em>{{ gettext("answer")}}:</em> {{ answer|xpath('./native')|first|text }}
    </dt>
    <dd class="riddle-answer-translation" lang="{{ _to }}">
        {{ answer|xpath('./xt')|first|text }}
    </dd>
{% endmacro -%}

{%- macro example_translation(example, genre_type) %}
    {% set xtctn  = example|xpath('./xtCtn')|first %}
    {% set answer = example|xpath('./answer')|first %}

    {% if xtctn %}
        {{ example_xtctn(xtctn, genre_type) }}
    {% else %}
        {{ example_xts(example, genre_type) }}
    {% endif %}

    {% if answer %}
        {{ example_answer(answer, genre_type) }}
    {% endif %}

{% endmacro -%}

{# TODO: have some JS collapse for long sets of examples? many entries have >5 #}

<div class="example_set">
    {# TODO: example collapse #}
    {#  {% if examples|length > 2 %}data-example-collapse{% endif %} #}
    <blockquote class="examples">
        {% for example in examples %}
        {% set genre_type = example|xpath('@genreType')|first %}
        {%- if genre_type %}
            {% set classes = "example " + genre_type %}
        {% else %}
            {% set genre_type = false %}
            {% set classes = "example" %}
        {% endif -%}
        <dl class="{{ classes }}">

            {{ example_text(example, genre_type) }}
            {{ example_translation(example, genre_type) }}

        </dl>
        {% endfor %}
    </blockquote>
</div>

{#  vim: set ts=4 sw=4 tw=72 syntax=htmljinja : #}
