{%- macro lemma_text(entry) -%}
    {{- entry|xpath('lg/l')|first|text }}
{%- endmacro -%}

{# TODO: lemma_ref and stuff #}
{# TODO:  include params as a variable available to entry template #}

{%- macro lemma_detail_link(entry, _from, _to) -%}
    {%- set params = 'no_compounds=true&lemma_match=true' -%}
    /detail/{{ _from }}/{{ _to }}/{{ lemma_text(entry) }}.html?{{ params }}
{%- endmacro -%}

{% macro korp_link_lemma(lemma) -%}
    {% if current_pair_settings.lemma_search_url -%}
        {% set search_url = current_pair_settings.lemma_search_url.replace('INPUT_LEMMA', lemma) %}
        <a class="korp_search lemma_action"
           href="{{ search_url }}">{% trans %}Texts{% endtrans %} &rarr;</a>
    {%- endif %}
{%- endmacro %}

{%- macro make_detail_link_target(lemma) -%}
    /detail/{{ _to }}/{{ _from }}/{{ lemma }}.html?no_compounds=true&lemma_match=true
{%- endmacro -%}

{%- macro definition_reference_link(tg, link_text, post_link_text='') -%}
    {# This assumes there's only one <t /> node, other cases handled elsewhere.
     #}

    {% set fra_ref = tg.xpath('./re/@fra_ref') %}

    {% if fra_ref|count > 0 %}
        {% set reference = fra_ref|join('') %}
    {% else %}
        {% set reference = false %}
    {% endif %}

    {% if reference %}
        {% set link_target = "/" + _from + "/" + _to + "/ref/?l_til_ref=" + reference %}
        {% set mark = '&rarr;' %}
    {% else %}
        {% if ' ' not in link_text %}
            {% set link_target = make_detail_link_target(link_text) %}
        {% else %}
            {% set link_target = false %}
        {% endif %}
    {% endif %}

    {% if link_target %}
        <a href="{{ link_target }}">{{ link_text }}</a> {{ post_link_text }}{{ mark }}
    {% else %}
        {{ link_text }}
    {% endif %}

{%- endmacro -%}

{%- macro definition_reference_link_many(ts, annotation=false) -%}
    {% if (_to, _from) in language_pairs %}
        {% for t in ts %}
            <a href="{{ make_detail_link_target(t.text) }}">{{- t.text -}}</a>{% if not loop.last %}, {% endif %}
        {% endfor %}
    {% else %}
        {% for t in ts %}
            {{- t.text -}}{% if not loop.last %}, {% endif %}
        {% endfor %}
    {% endif %}

    {% if annotation %}
        {{- annotation -}}
    {% else %}
    {% endif %}
{%- endmacro -%}

{# TODO: this may need to be its own template so it's easier to override? #}

{%- macro definition_text_and_link(tg) -%}
    {% set annotations = tg.xpath('./re') %}

    {% if annotations|count > 0 %}
        {% set annotation = '(' + annotations[0].text + ')' %}
    {% else  %}
        {% set annotation = false %}
    {% endif %}

    {% set t_nodes = tg.xpath('./t') %}

    {# Need to check for renderable texts for languages with incomplete lexica,
       where there is sometimes an empty <t /> node. #}

    {% set renderable_texts = tg.xpath('./t/text()')|count %}

    {% if renderable_texts > 0 %}

        {% if t_nodes|count > 1 %}
            {% set many_t_nodes = true %}
        {% else %}
            {% set many_t_nodes = false %}
        {% endif %}

        {# Check for how many translation nodes we have. One will cause
           problems if it is empty, because it produces a 'None' string,
           while more than one means we need separate links that are comma
           separated. #} 

        {% if many_t_nodes %}
            {% set translation_text = t_nodes|map(attribute='text') %}
        {% else %}
            {% set translation_text = false %}
            {% if t_nodes|count == 1 %}
                {# Here's where we might end up with a 'None' string #}
                {% set translation_text = t_nodes[0].text %}
                {% if translation_text == 'None' %}
                    {% set translation_text = false %}
                {% endif %}
            {% else %}
            {% endif %}
        {% endif %}

        {% if not many_t_nodes %}
            {% if translation_text and annotation %}
                {{ definition_reference_link(tg, translation_text, annotation) }}
            {% else %}
                {% if translation_text %}
                    {{ definition_reference_link(tg, translation_text) }}
                {% else %}
                    {{ definition_reference_link(tg, annotation) }}
                {% endif %}
            {% endif %}
        {% else %}
            {{ definition_reference_link_many(t_nodes, annotation) }}
        {% endif %}

    {% endif %}

{%- endmacro -%}

{# vim: set ts=4 sw=4 tw=72 syntax=jinja : #}
